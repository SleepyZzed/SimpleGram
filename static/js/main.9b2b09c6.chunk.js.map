{"version":3,"sources":["comps/Title.js","firebase/config.js","hooks/useStorage.js","comps/ProgressBar.js","comps/UploadForm.js","hooks/useFireStore.js","comps/ImageGrid.js","comps/Modal.js","App.js","index.js"],"names":["Title","className","firebase","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","projectStorage","projectFirestore","timestamp","FieldValue","serverTimestamp","useStorage","file","useState","progress","setProgress","error","setError","url","setUrl","useEffect","storageRef","ref","name","collectionRef","collection","createdAt","put","on","snap","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","add","ProgressBar","setFile","div","initial","width","animate","UploadForm","types","type","onChange","e","selected","target","files","includes","useFireStore","docs","setDocs","unsub","orderBy","onSnapshot","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","map","key","layout","whileHover","opacity","onClick","img","src","alt","transition","delay","Modal","selectedImg","classList","contains","y","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b2b09c6.chunk.js","sourcesContent":["import React from 'react';\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>SimpleGram</h1>\n      <h2>Upload a Picture</h2>\n      <p>Simple React.js firestore Image uploading site for practice</p>\n    </div>\n  )\n}\n\nexport default Title;","import * as firebase from 'firebase';\r\nimport 'firebase/storage';\r\nimport 'firebase/firestore';\r\n\r\n// TODO: Replace the following with your app's Firebase project configuration\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyCqxx8ZXEQfdDkPY6i97OIQ5ljlP5F3YZE\",\r\n  authDomain: \"fire-gram-dda12.firebaseapp.com\",\r\n  projectId: \"fire-gram-dda12\",\r\n  storageBucket: \"fire-gram-dda12.appspot.com\",\r\n  messagingSenderId: \"954579136339\",\r\n  appId: \"1:954579136339:web:2f23055617c4ae254bfba6\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst projectStorage = firebase.storage();\r\nconst projectFirestore = firebase.firestore();\r\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\r\n\r\nexport { projectFirestore, projectStorage, timestamp }\r\n\r\n","import { useState, useEffect } from \"react\";\r\nimport { projectStorage, projectFirestore, timestamp } from \"../firebase/config\";\r\n\r\nconst useStorage = (file) =>{\r\n    const [progress, setProgress]  = useState(0);\r\n    const [error, setError] = useState(null)\r\n    const [url, setUrl] = useState(null);\r\n\r\n    useEffect(() =>{\r\n        //references\r\n        const storageRef = projectStorage.ref(file.name);\r\n        const collectionRef = projectFirestore.collection('images');\r\n        const createdAt = timestamp();\r\n\r\n        storageRef.put(file).on('state_changed', (snap) =>{\r\n            let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n            setProgress(percentage);\r\n        }, (err) => {\r\n            setError(err);\r\n        }, async ()=> {\r\n            const url = await storageRef.getDownloadURL();\r\n            collectionRef.add({ url, createdAt });\r\n            setUrl(url);\r\n        })\r\n    }, [file]);\r\n\r\n    return { progress, url, error }\r\n\r\n}\r\n\r\nexport default useStorage\r\n","import React, { useEffect } from \"react\";\r\nimport useStorage from \"../hooks/useStorage\";\r\nimport {motion} from 'framer-motion';\r\n\r\nconst ProgressBar = ({file, setFile}) =>{\r\n    const{ url, progress } = useStorage(file);\r\n    useEffect(() =>{\r\n        if(url){\r\n            setFile(null);\r\n        }\r\n    }, [url, setFile])\r\n\r\n    return(\r\n        <motion.div className=\"progress-bar\"\r\n        initial={{width: 0}}\r\n        animate={{width: progress + '%'}}\r\n        \r\n        \r\n        ></motion.div>\r\n    )\r\n}\r\n\r\nexport default ProgressBar;","import React, { useState } from \"react\";\r\nimport ProgressBar from \"./ProgressBar\";\r\n\r\n\r\nconst UploadForm = () =>\r\n{   const [file, setFile] = useState(null);\r\n    const [error, setError] = useState(null);\r\n    const types = ['image/png', 'image/jpeg']\r\n\r\n    const changeHandler = (e) => {\r\n        let selected = e.target.files[0];\r\n        \r\n        if(selected && types.includes(selected.type))\r\n        {   \r\n            setFile(selected);\r\n            setError('');\r\n        } else{\r\n            setFile(null);\r\n            setError('Please select a valid image type (png or jpg)')\r\n        }\r\n    }\r\n    return (\r\n        <form>\r\n            <label>\r\n            <input type=\"file\" onChange={changeHandler} />\r\n            <span>+</span>\r\n            </label>\r\n            <div className=\"output\">\r\n                { error && <div className=\"error\">{error}</div> }\r\n                { file && <div>{file.name}</div> }\r\n                { file && <ProgressBar file={file} setFile={setFile}/> }\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default UploadForm;","import { useState, useEffect } from \"react\";\r\nimport { projectFirestore } from \"../firebase/config\";\r\n\r\nconst useFireStore = (collection) =>{\r\n    const[docs, setDocs] = useState([]);\r\n\r\n    useEffect(() =>{\r\n        const unsub = projectFirestore.collection(collection)\r\n        .orderBy('createdAt', 'desc')\r\n        .onSnapshot((snap)=>{\r\n            let documents = [];\r\n            snap.forEach(doc => {\r\n                documents.push({...doc.data(), id: doc.id})\r\n            });\r\n            setDocs(documents);\r\n        });\r\n\r\n        return () => unsub();\r\n    }, [collection])\r\n\r\n\r\n    return { docs };\r\n}\r\n\r\nexport default useFireStore;","import React from \"react\";\r\nimport useFireStore from '../hooks/useFireStore';\r\nimport { motion } from 'framer-motion';\r\n\r\nconst ImageGrid = ({ setSelectedImg }) =>{\r\n    const { docs } = useFireStore('images');\r\n    \r\n    return(\r\n        <div className=\"img-grid\">\r\n            {docs && docs.map(doc => (\r\n                <motion.div className=\"img-wrap\" key={doc.id}\r\n                layout\r\n                whileHover={{opacity: 1}}\r\n                onClick={()=> setSelectedImg(doc.url)}\r\n                \r\n                >\r\n                <motion.img src={doc.url} alt={doc.id}\r\n                    initial={{opacity: 0}}\r\n                    animate={{opacity: 1}}\r\n                    transition={{delay: 1}}\r\n                />\r\n                \r\n                </motion.div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\nexport default ImageGrid;","import React from \"react\";\r\nimport {motion} from 'framer-motion';\r\n\r\nconst Modal = ({selectedImg, setSelectedImg}) => {\r\n    const handleClick = (e) =>{\r\n        if(e.target.classList.contains('backdrop')){\r\n            setSelectedImg(null);\r\n        }\r\n        \r\n\r\n    }\r\n    return(\r\n        <motion.div className=\"backdrop\" onClick={handleClick}\r\n        initial={{opacity: 0}}\r\n        animate={{opacity: 1}}\r\n        >\r\n            <motion.img src={selectedImg} alt=\"big\"\r\n            initial= {{y: '-100vh'}}\r\n            animate={{y: 0}}\r\n            \r\n            />\r\n        </motion.div>\r\n    )\r\n}\r\n\r\nexport default Modal;","import React from 'react';\nimport Title from './comps/Title';\nimport UploadForm from './comps/UploadForm';\nimport ImageGrid from './comps/ImageGrid';\nimport Modal from './comps/Modal';\nimport { useState } from 'react';\n\nfunction App() {\n  const [selectedImg, setSelectedImg] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <Title />\n      <UploadForm />\n      <ImageGrid setSelectedImg={setSelectedImg}/>\n      {selectedImg && <Modal selectedImg = {selectedImg} setSelectedImg={setSelectedImg}/> }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}